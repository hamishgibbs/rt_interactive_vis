ihr <- ihr %>%
select(all_of(target_columns))
#test that cols line up with target cols
setdiff(colnames(ihr), target_columns)
setdiff(target_columns, colnames(ihr))
write_csv(ihr, .args[length(.args)])
##############################
# GPHIN
##############################
library(readxl)
library(readr)
library(lubridate)
library(countrycode)
library(tidyverse)
source('../who_target_columns.R')
source('../utils/join_who_country_names.R')
discard_names <- read_csv('../cleaning_utility_data/discard_names.csv')
region_names <- read_csv('../cleaning_utility_data/region_names.csv')
.args = c('../raw_csv_files/gphin1.csv', '../raw_csv_files/gphin2.csv', '../cleaned_datasets/gphin_clean.csv')
gphin_1 <- read_csv(.args[1]) %>%
mutate(`GPHIN ID` = as.character(`GPHIN ID`))
gphin_2 <- read_csv(.args[2]) %>%
mutate(`GPHIN ID` = as.character(`GPHIN ID`)) %>%
select(-...21)
#Read Dataset
#gphin_1 <- read_excel("../raw_data/GPHIN PH Measures Report for 2019- nCoV before Jan 29.xlsx",
#                      col_types = c("text", "date", "text",
#                                    "numeric", "text", "text", "text",
#                                    "text", "text", "text", "text", "text",
#                                    "text", "text", "text", "text", "text",
#                                    "text", "text"), skip = 4)
#gphin_2 <- read_excel("../raw_data/GPHIN PH Measures Report for COVID-19 outbreak 20200407 1000 YF.xlsx",
#                      col_types = c("text", "date", "text",
#                                    "numeric", "text", "text", "text", "text",
#                                    "text", "text", "text", "text", "text",
#                                    "text", "text", "text", "text", "text",
#                                    "text", "text", "numeric"), skip = 4)
#Merge datasets
gphin_1 <- gphin_1 %>% rename(`COUNTRY /ORGANIZATION` = COUNTRY)
gphin_1 <- gphin_1 %>% add_column(PPE = NA, .before = "RESEARCH ADVANCEMENT")
gphin <- bind_rows(gphin_1, gphin_2)
#fix dates
gphin$`DATE ADDED` <- as.Date(as.numeric(gphin$`DATE ADDED`), origin = "1899-12-30")
#Create event numbers (before splitting events with multiple interventions)
gphin <- gphin %>% mutate(prop_id = paste0('GPHIN', str_pad(row_number(), 5, pad = "0")))
#Change "x" in measure columns to respective column name
#w <- which(gphin[6:19]=="x" | gphin[6:19]=="X", arr.ind = TRUE)
#gphin[6:19][w] <- names(gphin[6:19])[w[,"col"]]
gphin = gphin %>%
mutate(`LAND SCREENING` = ifelse(`LAND SCREENING` == "x" | `LAND SCREENING` =="X", 'LAND SCREENING', NA),
`BORDER CLOSING` = ifelse(`BORDER CLOSING` == "x" | `BORDER CLOSING` =="X", 'BORDER CLOSING', NA),
`AIRPORT SCREENING: ENTRY` = ifelse(`AIRPORT SCREENING: ENTRY` == "x" | `AIRPORT SCREENING: ENTRY` =="X", 'AIRPORT SCREENING: ENTRY', NA),
`AIRPORT SCREENING: EXIT` = ifelse(`AIRPORT SCREENING: EXIT` == "x" | `AIRPORT SCREENING: EXIT` =="X", 'AIRPORT SCREENING: EXIT', NA),
`QUARANTINE / MONITORING` = ifelse(`QUARANTINE / MONITORING` == "x" | `QUARANTINE / MONITORING` =="X", 'QUARANTINE / MONITORING', NA),
`TRAVEL ADVISORY` = ifelse(`TRAVEL ADVISORY` == "x" | `TRAVEL ADVISORY` =="X", 'TRAVEL ADVISORY', NA),
`TRAVEL BAN` = ifelse(`TRAVEL BAN` == "x" | `TRAVEL BAN` =="X", 'TRAVEL BAN', NA),
`TRADE BANS` = ifelse(`TRADE BANS` == "x" | `TRADE BANS` =="X", 'TRADE BANS', NA),
`EDUCATION CAMPAIGN` = ifelse(`EDUCATION CAMPAIGN` == "x" | `EDUCATION CAMPAIGN` =="X", 'EDUCATION CAMPAIGN', NA),
`MASS GATHERING CANCELLATION` = ifelse(`MASS GATHERING CANCELLATION` == "x" | `MASS GATHERING CANCELLATION` =="X", 'MASS GATHERING CANCELLATION', NA),
`REPATRIATION` = ifelse(`REPATRIATION` == "x" | `REPATRIATION` =="X", 'REPATRIATION', NA),
`VACCINE/MCM DEPLOYED` = ifelse(`VACCINE/MCM DEPLOYED` == "x" | `VACCINE/MCM DEPLOYED` =="X", 'VACCINE/MCM DEPLOYED', NA),
`PPE` = ifelse(`PPE` == "x" | `PPE` =="X", 'PPE', NA),
`RESEARCH ADVANCEMENT` = ifelse(`RESEARCH ADVANCEMENT` == "x" | `RESEARCH ADVANCEMENT` =="X", 'RESEARCH ADVANCEMENT', NA))
#Paste Values together as characters
gphin$measure <- apply(gphin[6:19], 1, function(x) paste0(na.omit(x), collapse = "//"))
#separate the combined values into seperate rows
gphin <- separate_rows(gphin, measure, sep = "//")
#label blank measure values as "other"
gphin$measure[gphin$measure == ""] <- "Other"
#Set measure values to lower case characters
gphin$measure <- str_to_title(gphin$measure)
#Create ID variables
gphin <- gphin %>% mutate(number = NA) %>%
mutate(dataset = "GPHIN") %>%
mutate(who_id = str_c(dataset, "_", row_number()))
#Rename variables
gphin <- gphin %>%
rename(country_names_raw = `COUNTRY /ORGANIZATION`,
comments = SUMMARY,
date_entry = `DATE ADDED`,
source_type = SOURCE,
link = COMMENTS)
#drop unneeded columns
gphin = gphin %>% select(-`AIRPORT SCREENING: ENTRY`, -`AIRPORT SCREENING: EXIT`, -`LAND SCREENING`,
-`BORDER CLOSING`, -`QUARANTINE / MONITORING`, -`TRAVEL ADVISORY`, -`TRAVEL BAN`,
-`TRADE BANS`, -`EDUCATION CAMPAIGN`, -`MASS GATHERING CANCELLATION`, -REPATRIATION,
-`VACCINE/MCM DEPLOYED`, -PPE, -`RESEARCH ADVANCEMENT`, -`GPHIN ID`)
#add additional who columns
gphin <- gphin %>%
mutate(iso = NA,
admin_level = "unknown",
region = NA,
category = NA,
targeted = NA,
non_compliance = NA,
date_start = NA,
source_alt = NA,
response_type = NA,
date_end = NA,
source = NA,
value_usd = NA,
percent_interest = NA,
subcategory=NA)
#drop records from certain international organizations
gphin <- gphin %>% filter(!country_names_raw %in% discard_names$discard)
#remove sensitive country names and miscellaneous regions
gphin[replace_na(gphin$country_names_raw == region_names$region[1], FALSE), 'country_names_raw'] <- region_names$country[1]
gphin[replace_na(gphin$country_names_raw == region_names$region[1], FALSE), 'country_names_raw'] <- region_names$admin_level[1]
gphin[replace_na(gphin$country_names_raw == region_names$region[2], FALSE), 'country_names_raw'] <- region_names$country[2]
gphin[replace_na(gphin$country_names_raw == region_names$region[2], FALSE), 'country_names_raw'] <- region_names$admin_level[2]
gphin[replace_na(gphin$country_names_raw == region_names$region[3], FALSE), 'country_names_raw'] <- region_names$country[3]
gphin[replace_na(gphin$country_names_raw == region_names$region[3], FALSE), 'country_names_raw'] <- region_names$admin_level[3]
gphin[replace_na(gphin$country_names_raw == region_names$region[4], FALSE), 'country_names_raw'] <- region_names$country[4]
gphin[replace_na(gphin$country_names_raw == region_names$region[4], FALSE), 'country_names_raw'] <- region_names$admin_level[4]
gphin[replace_na(gphin$country_names_raw == region_names$region[5], FALSE), 'country_names_raw'] <- region_names$country[5]
gphin[replace_na(gphin$country_names_raw == region_names$region[5], FALSE), 'country_names_raw'] <- region_names$admin_level[5]
#Assign country codes
gphin <- gphin %>% mutate(iso = countrycode(country_names_raw, origin = "country.name", destination = "iso3c"))
#See which which values were not assigned a code
#unique(gphin$country_names_raw[is.na(gphin$iso)])
#Rename those that are actually countries
gphin$country_names_raw[gphin$country_names_raw == "Kyrgystan"] <- "Kyrgyzstan"
gphin$country_names_raw[gphin$country_names_raw == "Jodan"] <- "Jordan"
gphin$country_names_raw[gphin$country_names_raw == "Micronesia"] <- "Federated States of Micronesia (FSM)"
gphin$country_names_raw[gphin$country_names_raw == "Kyrgystan"] <- "Kyrgyzstan"
gphin$country_names_raw[gphin$country_names_raw == "Inida"] <- "India"
gphin$country_names_raw[gphin$country_names_raw %in% c("Untied States", "Untisd States", "Unitsd States")] <- "United States"
gphin$country_names_raw[gphin$country_names_raw == "Untied Kingdom"] <- "United Kingdom"
gphin$country_names_raw[gphin$country_names_raw == "Demark"] <- "Denmark"
gphin$country_names_raw[gphin$country_names_raw == "Indenesia"] <- "Indonesia"
gphin$country_names_raw[gphin$country_names_raw == "South Koreda"] <- "South Korea"
gphin$country_names_raw[gphin$country_names_raw == "\r\nMontenegro"] <- "Montenegro"
gphin$country_names_raw[gphin$country_names_raw == "Kynea"] <- "Kenya"
gphin$country_names_raw[gphin$country_names_raw == "Swtizerland"] <- "Switzerland"
gphin$country_names_raw[gphin$country_names_raw %in% c("Canana", "Caanda")] <- "Canada"
gphin$country_names_raw[gphin$country_names_raw == "Antigua and Bermuda"] <- "Antigua and Barbuda"
gphin$country_names_raw[gphin$country_names_raw == "Paula"] <- "Palau"
#Reassign country codes
gphin <- gphin %>% mutate(iso = countrycode(country_names_raw, origin = "country.name", destination = "iso3c"))
#Make collumn with official WHO names
gphin <- gphin %>% mutate(country = countrycode(iso, origin = "iso3c", destination = "country.name"))
#get all country names
all_country_names <- gphin %>% filter(!is.na(iso)) %>% pull(country) %>% unique()
#Set admin_level to other if there is no ISO code
gphin <- gphin %>% mutate(admin_level = ifelse(country %in% all_country_names, "national", "other"))
#Set admin_level_name to respective name if no ISO code
#gphin <- gphin %>% mutate(admin_level_name = case_when(
#    is.na(iso) == T ~ country_names_raw,
#    is.na(iso) == F ~ NA_character_))
#Remove country_names_raw
gphin$country_names_raw[is.na(gphin$iso)]
gphin <- gphin %>% select(-country_names_raw)
#Change to WHO taxonomy
#Make category variable
gphin <- gphin %>% mutate(category = case_when(
measure %in% c("Land Screening",
"Border Closing",
"Airport Screening: Entry",
"Airport Screening: Exit",
"Quarantine / Monitoring",
"Travel Advisory",
"Travel Ban") == TRUE ~ "Travel International measure",
measure == "Education Campaign" ~ "Individual measures",
measure == "Mass Gathering Cancellation" ~ "Social and physical distancing measures",
measure == "Repatriation" ~ "Repatriation",
measure == "Vaccine/Mcm Deployed" ~ "Drug-based measure",
measure == "Ppe" ~ "Preparation",
measure %in% c("Trade Bans",
"Research Advancement",
"") == TRUE ~ "Other"
))
#Change measure variable
gphin <- gphin %>% mutate(measure = case_when(
measure == "Land Screening" ~ "Restricting entry",
measure == "Border Closing" ~ "Closing international land borders",
measure == "Airport Screening: Entry" ~ "Entry screening and isolation or quarantine",
measure == "Airport Screening: Exit" ~ "Exit screening and isolation or quarantine",
measure == "Quarantine / Monitoring" ~ "Entry screening and isolation or quarantine",
measure == "Travel Advisory" ~ "Providing travel advice or warning",
measure == "Travel Ban" ~ "Restricting entry",
measure == "Trade Bans" ~ "Trade Ban",
measure == "Education Campaign" ~ "Education Campaign",
measure == "Mass Gathering Cancellation" ~ "Cancelling, restricting or adapting mass gatherings",
measure == "Repatriation" ~ "Repratiation",
measure == "Vaccine/Mcm Deployed" ~ NA_character_,
measure == "Ppe" ~ "Scale up",
measure == "Research Advancement" ~ "Research"
))
#join correct who country names
gphin <- gphin %>%
join_who_country_names(.)
#rearrange column order
gphin <- gphin %>%
select(all_of(target_columns))
#test that cols line up with target cols
setdiff(colnames(gphin), target_columns)
setdiff(target_columns, colnames(gphin))
write_csv(gphin, .args[length(.args)])
source('../who_target_columns.R')
source('./functions/cdc_rename_columns.R')
source('./functions/cdc_format_existing_columns.R')
source('./functions/cdc_drop_raw_columns.R')
source('./functions/cdc_add_who_columns.R')
source('../utils/join_who_country_names.R')
# load libraries
library(dplyr)
library(countrycode)
.args = c('../raw_csv_files/cdc.csv', '../cleaned_datasets/cdc_clean.csv')
cdc_data = read_csv(.args[1])
# relabelling for Taiwan
cdc_data$`Subnational/regional only`[cdc_data$Country=="Taiwan"] = "Taiwan"
cdc_data$Country[cdc_data$Country=="Taiwan"] = "China"
# relabelling for Kosovo
cdc_data$`Subnational/regional only`[cdc_data$Country=="Kosovo"] = "Kosovo"
cdc_data$Country[cdc_data$Country=="Kosovo"] = "Serbia"
cdc_clean = cdc_data %>%
cdc_rename_columns(.) %>%
cdc_format_existing_columns(.) %>%
cdc_drop_raw_columns(.) %>%
cdc_add_who_columns(.)
# remove empty row
cdc_clean = subset(cdc_clean, !is.na(prop_id))
#join correct who country names
cdc_clean <- cdc_clean %>%
join_who_country_names(.)
#rearrange column order
cdc_clean <- cdc_clean %>%
select(all_of(target_columns))
#test that cols line up with target cols
setdiff(colnames(cdc_clean), target_columns)
setdiff(target_columns, colnames(cdc_clean))
write_csv(cdc_clean, .args[length(.args)])
source('../who_target_columns.R')
source('./functions/acaps_rename_columns.R')
source('./functions/acaps_format_existing_columns.R')
source('./functions/acaps_drop_raw_columns.R')
source('./functions/acaps_add_who_columns.R')
source('../utils/join_who_country_names.R')
.args = c('../raw_csv_files/acaps.csv', '../cleaned_datasets/acaps_clean.csv')
acaps_data = read_csv(.args[1])
acaps_clean = acaps_data %>%
acaps_rename_columns(.) %>%
acaps_format_existing_columns(.) %>%
acaps_drop_raw_columns(.) %>%
acaps_add_who_columns(.)
acaps_clean$country %>% unique()
#join correct who country names
acaps_clean <- acaps_clean %>%
join_who_country_names(.)
#rearrange column order
acaps_clean <- acaps_clean %>%
select(all_of(target_columns))
#test that cols line up with target cols
setdiff(colnames(acaps_clean), target_columns)
setdiff(target_columns, colnames(acaps_clean))
write_csv(acaps_clean, .args[length(.args)])
require(tidyverse)
source('./functions/code_country_names.R')
source('../who_target_columns.R')
setwd("~/Documents/Covid-19/WHO_Interventions/WHO_Intervention_Cleaning/data_combination")
source('../who_target_columns.R')
#combine all cleaned datasets into one - make sure colnames match
.args <- c('../cleaned_datasets', '../output')
clean_files <- list.files(.args[1], full.names = T)
acaps_clean <- read_csv(clean_files[1], col_types = target_columns_datatype)
cdc_clean <- read_csv(clean_files[2], col_types = target_columns_datatype)
gphin_clean <- read_csv(clean_files[3], col_types = target_columns_datatype)
ihr_clean <- read_csv(clean_files[4], col_types = target_columns_datatype)
oxcgrt_clean <- read_csv(clean_files[5], col_types = target_columns_datatype)
vienna_clean <- read_csv(clean_files[6], col_types = target_columns_datatype)
gphin_clean$country %>% unique()
clean_data <- rbind(acaps_clean, cdc_clean, gphin_clean, ihr_clean, oxcgrt_clean, vienna_clean) %>%
select(all_of(target_columns))
clean_data <- rbind(acaps_clean, cdc_clean, ihr_clean, vienna_clean) %>%
select(all_of(target_columns))
unlink(paste0(.args[length(.args)], '/*.csv'), recursive = FALSE)
write_csv(clean_data, paste0(.args[length(.args)], '/clean_data_',gsub('-', '_', substr(Sys.time(), 1, 10)), '.csv'))
read_csv(paste0(.args[length(.args)], '/clean_data_',gsub('-', '_', substr(Sys.time(), 1, 10)), '.csv'))
d <- read_csv(paste0(.args[length(.args)], '/clean_data_',gsub('-', '_', substr(Sys.time(), 1, 10)), '.csv'))
d %>% group_by(country) %>% summarise(n = n())
View(d)
d <- d %>% group_by(country) %>% summarise(n = n())
View(d)
write_csv(d, '/Users/hamishgibbs/Documents/Covid-19/WHO_Interventions/n_country_records.csv)
write_csv(d, '/Users/hamishgibbs/Documents/Covid-19/WHO_Interventions/n_country_records.csv')
write_csv(d, '/Users/hamishgibbs/Documents/Covid-19/WHO_Interventions/n_country_records.csv')
write_csv(d, '/Users/hamishgibbs/Documents/Covid-19/WHO_Interventions/n_country_records.csv')
require(tidyverse)
source('../who_target_columns.R')
#combine all cleaned datasets into one - make sure colnames match
.args <- c('../cleaned_datasets', '../output')
clean_files <- list.files(.args[1], full.names = T)
acaps_clean <- read_csv(clean_files[1], col_types = target_columns_datatype)
cdc_clean <- read_csv(clean_files[2], col_types = target_columns_datatype)
gphin_clean <- read_csv(clean_files[3], col_types = target_columns_datatype)
ihr_clean <- read_csv(clean_files[4], col_types = target_columns_datatype)
oxcgrt_clean <- read_csv(clean_files[5], col_types = target_columns_datatype)
vienna_clean <- read_csv(clean_files[6], col_types = target_columns_datatype)
clean_files
clean_data <- rbind(acaps_clean, cdc_clean, gphin_clean, ihr_clean, oxcgrt_clean, vienna_clean) %>%
select(all_of(target_columns))
unlink(paste0(.args[length(.args)], '/*.csv'), recursive = FALSE)
write_csv(clean_data, paste0(.args[length(.args)], '/clean_data_',gsub('-', '_', substr(Sys.time(), 1, 10)), '.csv'))
d <- read_csv(paste0(.args[length(.args)], '/clean_data_',gsub('-', '_', substr(Sys.time(), 1, 10)), '.csv'))
d <- d %>% group_by(country) %>% summarise(n = n())
write_csv(d, '/Users/hamishgibbs/Documents/Covid-19/WHO_Interventions/n_country_records.csv')
d
sum(d$n)
setwd("~/Documents/Covid-19/WHO_Interventions/WHO_Intervention_Cleaning/data_combination")
require(tidyverse)
source('../who_target_columns.R')
#combine all cleaned datasets into one - make sure colnames match
.args <- c('../cleaned_datasets', '../output')
clean_files <- list.files(.args[1], full.names = T)
acaps_clean <- read_csv(clean_files[1], col_types = target_columns_datatype)
cdc_clean <- read_csv(clean_files[2], col_types = target_columns_datatype)
gphin_clean <- read_csv(clean_files[3], col_types = target_columns_datatype)
ihr_clean <- read_csv(clean_files[4], col_types = target_columns_datatype)
oxcgrt_clean <- read_csv(clean_files[5], col_types = target_columns_datatype)
vienna_clean <- read_csv(clean_files[6], col_types = target_columns_datatype)
clean_data <- rbind(acaps_clean, cdc_clean, gphin_clean, ihr_clean, oxcgrt_clean, vienna_clean) %>%
select(all_of(target_columns)) %>%
mutate(number = row_number())
unlink(paste0(.args[length(.args)], '/*.csv'), recursive = FALSE)
write_csv(clean_data, paste0(.args[length(.args)], '/clean_data_',gsub('-', '_', substr(Sys.time(), 1, 10)), '.csv'))
rds_files <- list.files('/Users/hamishgibbs/Documents/Covid-19/RT_estimation/interactive_viz/covid-global/national')
rds_files <- list.files('/Users/hamishgibbs/Documents/Covid-19/RT_estimation/interactive_viz/covid-global/national', pattern = '.rds', full.names = TRUE)
rds_files
rds_files <- list.files('/Users/hamishgibbs/Documents/Covid-19/RT_estimation/interactive_viz/covid-global/national', pattern = '.rds', full.names = TRUE)
rds_files <- list.files('/Users/hamishgibbs/Documents/Covid-19/RT_estimation/interactive_viz/covid-global/national/United States of America/latest', pattern = '.rds', full.names = TRUE)
rds_files <- list.files('/Users/hamishgibbs/Documents/Covid-19/RT_estimation/interactive_viz/covid-global/national/United States of America/latest',
pattern = '.rds',
full.names = TRUE)
rds_files
read_rds(red_files[1])
read_rds(rds_files[1])
read_rds(rds_files[2])
read_rds(rds_files[3])
read_rds(rds_files[4])
read_rds(rds_files[5])
read_rds(rds_files[6])
read_rds(rds_files[5])
d <- read_rds(rds_files[5])
d <- read_rds(rds_files[6])
d
d <- read_rds(rds_files[7])
d
d <- read_rds(rds_files[8])
d
d <- read_rds(rds_files[9])
d
d <- read_rds(rds_files[10])
d
d <- read_rds(rds_files[11])
d
d <- read_rds(rds_files[12])
d
d <- read_rds(rds_files[13])
d
d <- read_rds(rds_files[14])
d
d <- read_rds(rds_files[15])
d
d <- read_rds(rds_files[16])
d
d <- read_rds(rds_files[17])
d
d <- read_rds(rds_files[18])
d
d <- read_rds(rds_files[19])
d
d <- read_rds(rds_files[20])
d
d <- read_rds(rds_files[21])
d
d <- read_rds(rds_files[22])
d
d <- read_rds(rds_files[23])
rds_files[23]
d <- read_rds(rds_files[21])
d <- read_rds(rds_files[20])
d
read_rds('/Users/hamishgibbs/Documents/Covid-19/RT_estimation/interactive_viz/covid-global/national/United States of America/latest/summarised_nowcast.rds')
d <- read_rds('/Users/hamishgibbs/Documents/Covid-19/RT_estimation/interactive_viz/covid-global/national/United States of America/latest/summarised_nowcast.rds')
d %>%
ggplot() +
geom_path(aes(x = date, y = median))
d$type %>% unique()
d %>%
ggplot() +
geom_path(aes(x = date, y = median), group = nowcast)
d %>%
ggplot() +
geom_path(aes(x = date, y = median, group = type))
cases <- NCoVUtils::get_ecdc_cases()
cases <- NCoVUtils::get_ecdc_cases('United States')
cases
cases <- NCoVUtils::get_ecdc_cases('United States of America')
cases
cases <- NCoVUtils::get_ecdc_cases('USA')
cases <- NCoVUtils::get_ecdc_cases()
cases
cases %>% pull(country) %>% unique()
cases <- NCoVUtils::get_ecdc_cases("United_States_of_America")
cases
d %>% filter(type == 'nowcast')
cases <- NCoVUtils::get_ecdc_cases("United_States_of_America")
cases
d %>%
filter(type == 'nowcast') %>%
left_join(cases, by = c('date' = 'date'))
d <- d %>%
filter(type == 'nowcast') %>%
left_join(cases, by = c('date' = 'date'))
View(cases)
View(d)
d <- d %>%
filter(type == 'nowcast') %>%
left_join(cases, by = c('date' = 'date')) %>%
select(-day, -month, -year, -deaths, -country, -geoid, -countryterritoryCode, -population_2018)
d <- read_rds(rds_files[20])
d <- d %>%
filter(type == 'nowcast') %>%
left_join(cases, by = c('date' = 'date')) %>%
select(-day, -month, -year, -deaths, -country, -geoid, -countryterritoryCode, -population_2018)
type
d <- read_rds('/Users/hamishgibbs/Documents/Covid-19/RT_estimation/interactive_viz/covid-global/national/United States of America/latest/summarised_nowcast.rds')
d <- d %>%
filter(type == 'nowcast') %>%
left_join(cases, by = c('date' = 'date')) %>%
select(-day, -month, -year, -deaths, -country, -geoid, -countryterritoryCode, -population_2018)
d
d %>%
ggplot() +
geom_path(aes(x = date, y = median))
d %>%
ggplot() +
geom_path(aes(x = date, y = median)) +
geom_path(aes(x = date, y = cases))
d
write_csv(d, '/Users/hamishgibbs/Documents/Covid-19/RT_estimation/interactive_viz/rt_interactive_vis_datasets/nowcast_test_usa.csv')
d <- read_rds('/Users/hamishgibbs/Documents/Covid-19/RT_estimation/interactive_viz/covid-global/national/United States of America/latest/summarised_nowcast.rds')
d <- d %>%
filter(type == 'nowcast') %>%
left_join(cases, by = c('date' = 'date')) %>%
mutate(cases = ifelse(is.na(cases), 0, cases)) %>%
select(-day, -month, -year, -deaths, -country, -geoid, -countryterritoryCode, -population_2018)
d
View(d)
write_csv(d, '/Users/hamishgibbs/Documents/Covid-19/RT_estimation/interactive_viz/rt_interactive_vis_datasets/nowcast_test_usa.csv')
max(d$cases)
max(d$top)
setwd("~/Documents/Covid-19/RT_estimation/interactive_viz/rt_interactive_vis_datasets/widget_test/R")
setwd("~/Documents/Covid-19/RT_estimation/interactive_viz/rt_interactive_vis_datasets/widget_test/R")
setwd("~/Documents/Covid-19/RT_estimation/interactive_viz/rt_interactive_vis_datasets")
setwd("~/Documents/Covid-19/RT_estimation/interactive_viz/rt_interactive_vis_datasets/widget_test/R")
get_afghan_regional_cases <- function() {
url <- "https://docs.google.com/spreadsheets/d/1F-AMEDtqK78EA6LYME2oOsWQsgJi4CT3V_G4Uo-47Rg/export?format=csv"
#download
cls <- c(
Province = "character",
Cases = "integer",
Deaths = "integer",
Recoveries = "integer",
Active.Cases = "integer",
Date = "Date"
)
data <- read.csv(url, stringsAsFactors = FALSE, colClass = cls)
#reformat
data <- dplyr::transmute(data,
date = Date,
country = "Afghanistan",
province = stringr::str_replace(Province, " Province", ""),
cases = Cases,
deaths = Deaths,
recovered = Recoveries
)
# put NA where gaps
data <- tidyr::complete(data,
date = tidyr::full_seq(date, period  = 1),
country,
province,
fill = list(
cases = NA_integer_,
deaths = NA_integer_,
recovered = NA_integer_
)
)
# fill NA with previous values
data <- dplyr::ungroup(tidyr::fill(
dplyr::group_by(data, country, province),
cases,
deaths,
recovered
))
# de-cumulate
data <- dplyr::ungroup(dplyr::mutate(
dplyr::group_by(data, country, province),
cases = c(0, diff(cases)),
deaths = c(0, diff(deaths)),
recovered = c(0, diff(recovered))
))
# arrange
data <- dplyr::arrange(data, date, country, province)
return(data)
}
get_afghan_regional_cases()
get_afghan_regional_cases() %>% pull(cases)
get_afghan_regional_cases() %>% pull(cases) %>% plot()
get_afghan_regional_cases() %>% pull(deaths) %>% plot()
get_afghan_regional_cases() %>% pull(recovered) %>% plot()
setwd("~/Documents/Covid-19/RT_estimation/interactive_viz/rt_interactive_vis/widget_test/R")
